@model ERT.Models.Supplier

@{
	ViewBag.Title = "Create";
}
<h4>Register</h4>
<h2>Apply for supplier Account</h2>
<hr />

@using (Html.BeginForm("Create", "Suppliers", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">

		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

		<div class="form-group">
			@Html.LabelFor(model => model.Supplier_Name, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Supplier_Name, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Supplier_Name, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Supplier_Image, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-3">
				<div>
					<input type="file" id="filelist" name="filelist" />
				</div>
				@Html.ValidationMessageFor(model => model.Supplier_Image, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Supplier_LastName, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Supplier_LastName, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Supplier_LastName, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Supplier_Address, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Supplier_Address, new { htmlAttributes = new { @class = "form-control" , id = "travelto" } })
				@Html.ValidationMessageFor(model => model.Supplier_Address, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Supplier_ContactNumber, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Supplier_ContactNumber, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Supplier_ContactNumber, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Supplier_Email, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Supplier_Email, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Supplier_Email, "", new { @class = "text-danger" })
			</div>
		</div>


		<div class="form-group">
			@Html.LabelFor(model => model.Supplier_Password, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Supplier_Password, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Supplier_Password, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Supplier_Ducuments, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-3">
				<div>
					<input type="file" id="upload" name="upload" />
				</div>
				@Html.ValidationMessageFor(model => model.Supplier_Ducuments, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Request For Account" class="btn btn-primary" />
			</div>
		</div>
	</div>
}

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")

	<!--ENSURE YOU CHANGE TO YOUR OWN API KEY HERE !!! -->
	<script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyBJiH2ZhfOjGD9SCZSWwpo5BDoCiL3up3Y" type="text/javascript"></script>

	<!-- code for example 1 -->
	<script>

		var source, destination;
		var directionsDisplay;
		var directionsService = new google.maps.DirectionsService();
		var inputFrom = document.getElementById('travelfrom');
		var inputTo = document.getElementById('travelto');
		var distances = document.getElementById('distance');
		var options = {
			componentRestrictions: { country: ['za'] }
		};
		google.maps.event.addDomListener(window, 'load', function () {

			var autocomplete1 = new google.maps.places.Autocomplete(inputFrom, options);
			var autocomplete2 = new google.maps.places.Autocomplete(inputTo, options);

		});

		function GetRoute() {

			var directionsDisplay;
			var directionsService = new google.maps.DirectionsService();
			var map;
			var mapCenter = new google.maps.LatLng(-29.708421, 31.0322233);
			var myOptions =
			{
				zoom: 12,
				mapTypeId: google.maps.MapTypeId.ROADMAP,
				center: mapCenter
			};
			map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
			//There should be a div with id 'map_canvas' in your html.
			//It can be done in angular directive if you are using angular


			var request = {
				origin: new google.maps.LatLng(-29.708421, 31.0322233),
				destination: new google.maps.LatLng(-29.708421, 31.0322233),
				travelMode: 'DRIVING'
			}


			directionsService.route(request, function (response, status) {
				if (status === 'OK') {
					directionsDisplay = new google.maps.DirectionsRenderer();
					directionsDisplay.setMap(map);
					directionsDisplay.setDirections(response);
					// For each route, display summary information.
				} else {
					console.log('Directions request failed due to ' + status, response);
				}
			});


			source = document.getElementById("travelfrom").value;
			destination = document.getElementById("travelto").value;
			distances.value = "";

			var request = {
				origin: source,
				destination: destination,
				travelMode: google.maps.TravelMode.DRIVING
			};

			directionsService.route(request, function (response, status) {
				if (status == google.maps.DirectionsStatus.OK) {
					directionsDisplay.setDirections(response);
				}

			});

			//*********DISTANCE AND DURATION**********************//
			var service = new google.maps.DistanceMatrixService();
			service.getDistanceMatrix({
				origins: [source],

				destinations: [destination],
				travelMode: google.maps.TravelMode.DRIVING,
				unitSystem: google.maps.UnitSystem.METRIC,
				avoidHighways: false,
				avoidTolls: false
			}, function (response, status) {

				if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
					var distance = response.rows[0].elements[0].distance.text;
					var duration = response.rows[0].elements[0].duration.value;

					duration = parseFloat(duration / 60).toFixed(2);

					distances.value = distance.toLowerCase().replace(" km", "");
					distances.value = distances.value.split(',').join('.');
					distances.value = Math.ceil(parseFloat(distances.value));
					inputFrom.readOnly = true;
					inputTo.readOnly = true;


				} else {
					alert("Unable to find the distance via road.");
					inputFrom.readOnly = false;
					inputTo.readOnly = false;
					distance.value = "";

				}
			});
		}

		function Reset() {


			//inputFrom.value = "";
			inputTo.value = "";
			distance.value = "";
			inputFrom.readOnly = false;
			inputTo.readOnly = false
		}
	</script>

}

